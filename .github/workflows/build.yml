name: Build

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1

    - name: Find Windows MSBuild
      uses: warrenbuckley/Setup-MSBuild@v1
      if: startsWith (matrix.os, 'windows')

    - name: Restore
      run: msbuild Mono.TextTemplating.sln -t:Restore -p:Configuration=Release -m

    - name: Build
      run: msbuild Mono.TextTemplating.sln -p:Configuration=Release -m

    - name: Set Mono env var
      if: startsWith (matrix.os, 'windows') == false
      run: echo '::set-env name=RUN_EXE::mono'

    - name: Download NuGet
      run: curl https://dist.nuget.org/win-x86-commandline/v5.3.0/nuget.exe -o nuget.exe
      shell: bash

    - name: Download NUnit
      run: $RUN_EXE ./nuget.exe install NUnit.ConsoleRunner -Version 3.8.0 -OutputDirectory testrunner
      shell: bash

    - name: Test
      run: $RUN_EXE ./testrunner/NUnit.ConsoleRunner.3.8.0/tools/nunit3-console.exe ./Mono.TextTemplating.Tests/bin/Release/net472/Mono.TextTemplating.Tests.dll
      shell: bash
      
    - uses: actions/upload-artifact@master
      with:
        name: packages
        path: packages/Release

  publish:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          path: packages
          name: packages
      - uses: warrenbuckley/Setup-Nuget@v1
      - name: Publish to GPR
        run: |
          nuget source Add -Name "GPR" -Source "https://nuget.pkg.github.com/mono/index.json" -UserName mono -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push packages\**\*.nupkg -Source "GPR" -SkipDuplicate
